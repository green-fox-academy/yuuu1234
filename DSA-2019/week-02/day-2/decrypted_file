The  Zen  of  Python  
by  Tim  Petrs  

Beautifl  is  betr  than  ugly  
Explict  is  betr  than  implct  
Simple  is  betr  than  complex  
Complex  is  betr  than  compliated  
Flat  is  betr  than  nestd  
Sparse  is  betr  than  dens  
Readbilty  counts  
Special  case  aren  t  special  enough  to  break  the  rules  
Althoug  practily  beats  purity  
Eros  should  nevr  pas  silenty  
Unles  explicty  silencd  
In  the  face  of  ambiguty  refus  the  tempaion  to  gues  
Ther  should  be  one  and  prefably  only  one  obvius  way  to  do  it  
Althoug  tha  way  may  not  be  obvius  at  first  unles  you  re  Dutch  
Now  is  betr  than  nevr  
Althoug  nevr  is  often  betr  than  right  now  
If  the  implentao  is  hard  to  explain  it  s  a  bad  idea  
If  the  implentao  is  easy  to  explain  it  may  be  a  god  idea  
Namespc  are  one  honkig  great  idea  let  s  do  more  of  those  

The Zen of Python

by Tim Peters



Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.

Readability counts.

Special cases aren't special enough to break the rules.

Although practicality beats purity.

Errors should never pass silently.

Unless explicitly silenced.

In the face of ambiguity, refuse the temptation to guess.

There should be one-- and preferably only one --obvious way to do it.

Although that way may not be obvious at first unless you're Dutch.

Now is better than never.

Although never is often better than *right* now.

If the implementation is hard to explain, it's a bad idea.

If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!

The Zen of Python

by Tim Peters



Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.

Readability counts.

Special cases aren't special enough to break the rules.

Although practicality beats purity.

Errors should never pass silently.

Unless explicitly silenced.

In the face of ambiguity, refuse the temptation to guess.

There should be one-- and preferably only one --obvious way to do it.

Although that way may not be obvious at first unless you're Dutch.

Now is better than never.

Although never is often better than *right* now.

If the implementation is hard to explain, it's a bad idea.

If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
he en of ython 
by im eters 
 
eautiful is better than ugly 
xplicit is better than implicit 
imple is better than complex 
omplex is better than complicated 
lat is better than nested 
parse is better than dense 
eadability counts 
pecial cases arent special enough to break the rules 
lthough practicality beats purity 
rrors should never pass silently 
nless explicitly silenced 
n the face of ambiguity refuse the temptation to guess 
here should be one and preferably only one obvious way to do it 
lthough that way may not be obvious at first unless youre utch 
ow is better than never 
lthough never is often better than right now 
f the implementation is hard to explain its a bad idea 
f the implementation is easy to explain it may be a good idea 
amespaces are one honking great idea  lets do more of those 

The Zen of Python

by Tim Peters



Beautiful is better than ugly.

Explicit is better than implicit.

Simple is better than complex.

Complex is better than complicated.

Flat is better than nested.

Sparse is better than dense.

Readability counts.

Special cases aren't special enough to break the rules.

Although practicality beats purity.

Errors should never pass silently.

Unless explicitly silenced.

In the face of ambiguity, refuse the temptation to guess.

There should be one-- and preferably only one --obvious way to do it.

Although that way may not be obvious at first unless you're Dutch.

Now is better than never.

Although never is often better than *right* now.

If the implementation is hard to explain, it's a bad idea.

If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
